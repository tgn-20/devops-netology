1. Посмотрите на сценарий ниже и ответьте на вопрос: "Подходит ли в этом сценарии использование докера? Или лучше подойдет виртуальная машина, физическая машина? Или возможны разные варианты?"
Детально опишите и обоснуйте свой выбор.
--
Сценарий:
•	Высоконагруженное монолитное java веб-приложение;
•	Go-микросервис для генерации отчетов;
•	Nodejs веб-приложение;
•	Мобильное приложение c версиями для Android и iOS;
•	База данных postgresql используемая, как кэш;
•	Шина данных на базе Apache Kafka;
•	Очередь для Logstash на базе Redis;
•	Elastic stack для реализации логирования продуктивного веб-приложения - три ноды elasticsearch, два logstash и две ноды kibana;
•	Мониторинг-стек на базе prometheus и grafana;
•	Mongodb, как основное хранилище данных для java-приложения;
•	Jenkins-сервер.


Вопросы интересные, учитывая то, что практического опыта работы не было, а elasticsearch, Jenkins, Mongodb и тп идут далее по курсу, для правильного анализа нужно понимать, что из себя представляет та или иная система или приложение, поверхностное знакомство из пары статей, думаю, вариант не очень)
-Высоконагруженное монолитное java веб-приложение – Docker, т.к. высокая нагрузка, а контейнеры используют ресурсы системы без дополнительных «прослоек» в виде гипервизора, что будет плюсом. Также удобно в случае проблем перезапускать контейнер, что займёт меньше времени. Плюс не будет проблемы с зависимостями и версиями.
- Go-микросервис для генерации отчетов – также Docker, исключает проблемы с зависимостями, быстрый рестарт, сборка через dockerfile.
- Nodejs веб-приложение –  Docker по аналогичным причинам.
- Мобильное приложение c версиями для Android и iOS – Аналогично Docker, решается проблема «а на моем компьютере всё работало».
- База данных postgresql используемая, как кэш – аналогично Docker. Отказоустойчивость, быстрое развертывание, нет проблемы версионности.
- Шина данных на базе Apache Kafka – Высокая нагрузка, поэтому физический сервер или на нескольких узлах k8s, данные хранить на внешнем ресурсе.
- Очередь для Logstash на базе Redis – Docker по аналогичным причинам.
- Elastic stack для реализации логирования продуктивного веб-приложения – три ноды   elasticsearch, два logstash и две ноды kibana – Docker compose – удобство запуска нескольких контейнеров.
- Мониторинг-стек на базе prometheus и grafana - Docker compose
- Mongodb, как основное хранилище данных для java-приложения – точно не виртуальная машина, удобнее опять же Docker с внешним хранилищем данных.
- Jenkins-сервер – Docker, быстрое развертывание, перезапуск контейнера.

2. Сценарий выполения задачи:
•	создайте свой репозиторий на докерхаб;
•	выберете любой образ, который содержит апачи веб-сервер;
•	создайте свой форк образа;
•	реализуйте функциональность: запуск веб-сервера в фоне с индекс-страницей, содержащей HTML-код ниже:
<html>
<head>
Hey, Netology
</head>
<body>
<h1>I’m kinda DevOps now</h1>
</body>
</html>
Опубликуйте созданный форк в своем репозитории и предоставьте ответ в виде ссылки на докерхаб-репо.


https://hub.docker.com/repository/docker/murakaz/apache


3. 
    Запустите первый контейнер из образа centos c любым тэгом в фоновом режиме, подключив папку info из текущей рабочей директории на хостовой машине в /share/info контейнера;
    Запустите второй контейнер из образа debian:latest в фоновом режиме, подключив папку info из текущей рабочей директории на хостовой машине в /info контейнера;
    Подключитесь к первому контейнеру с помощью exec и создайте текстовый файл любого содержания в /share/info ;
    Добавьте еще один файл в папку info на хостовой машине;
    Подключитесь во второй контейнер и отобразите листинг и содержание файлов в /info контейнера.

[root@centos]# mkdir info
[root@centos]# docker run --name centosinfo -v /info:/share/info -dit centos
[root@centos]# docker run --name debianinfo -v /info:/info -dit debian:latest
[root@centos]# docker exec -ti centosinfo /bin/bash
[root@dd68ff2f3e35 /]# echo "CentosFile" > /share/info/somefileCentos
[root@dd68ff2f3e35 /]# exit
[root@centos]# cd info
[root@centos info]# echo "HostFile" > somefileHost
[root@centos info]# docker exec -ti debianinfo /bin/bash
[root@e46661130350 /]# cd info
[root@e46661130350 /info]# ls
somefileCentos
[root@e46661130350:/info]# ls -la
total 4
drwxr-xr-x. 2 root root 28 Jun 19 19:26 .
drwxr-xr-x. 1 root root 30 Jun 19 19:16 ..
-rw-r--r--. 1 root root 11 Jun 19 19:26 somefileCentos

 
 
